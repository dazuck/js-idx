(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{70:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return m}));var i=n(2),a=n(6),r=(n(0),n(74)),c={title:"Getting Started"},o={unversionedId:"lib-getting-started",id:"lib-getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Environment",source:"@site/docs/lib-getting-started.md",slug:"/lib-getting-started",permalink:"/docs/lib-getting-started",editUrl:"https://github.com/ceramicstudio/js-idx/edit/master/website/docs/lib-getting-started.md",version:"current",sidebar:"docs",previous:{title:"Terminology",permalink:"/docs/idx-terminology"},next:{title:"APIs",permalink:"/docs/lib-apis"}},s=[{value:"Environment",id:"environment",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Definitions and Schemas",id:"definitions-and-schemas",children:[]},{value:"Example usage",id:"example-usage",children:[]}],l={rightToc:s};function m(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"environment"},"Environment"),Object(r.b)("p",null,"IDX needs to access the Ceramic network using an implementation of the Ceramic API as exported by the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/ceramicnetwork/js-ceramic/tree/develop/packages/ceramic-common"}),Object(r.b)("inlineCode",{parentName:"a"},"@ceramicnetwork/ceramic-common")," library"),"."),Object(r.b)("p",null,"Packages implementing this interface include ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/ceramicnetwork/js-ceramic/tree/develop/packages/ceramic-core"}),Object(r.b)("inlineCode",{parentName:"a"},"@ceramicnetwork/ceramic-core"))," and ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/ceramicnetwork/js-ceramic/tree/develop/packages/ceramic-http-client"}),Object(r.b)("inlineCode",{parentName:"a"},"@ceramicnetwork/ceramic-http-client")),"."),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,"The IDX library can be installed from npm:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-sh"}),"npm install @ceramicstudio/idx\n")),Object(r.b)("h2",{id:"definitions-and-schemas"},"Definitions and Schemas"),Object(r.b)("p",null,"All ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/idx-terminology#document"}),"Documents")," attached to the ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/idx-terminology#identity-index--idx"}),"Identity Index")," need to have ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/idx-terminology#definition"}),"Definion"),"."),Object(r.b)("p",null,"Once a public Ceramic network is running, the IDX library will provide a set of Definions that can be used directly, but in the meantime these needs to be defined by developers using IDX."),Object(r.b)("p",null,"To create a Defininion, a specific ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/idx-terminology#schema"}),"Schema")," needs to be used, and therefore must be present on the Ceramic node used by the IDX instance.\nThe ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/ceramicstudio/js-idx-schemas"}),Object(r.b)("inlineCode",{parentName:"a"},"idx-schemas")," library")," can be used to easily publish schemas to the Ceramic node:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"import { schemasList, publishSchemas } from '@ceramicstudio/idx-schemas'\n\n// `ceramic` implements the CeramicApi interface\nconst schemas = await publishSchemas({ ceramic, schemas: schemasList })\n")),Object(r.b)("p",null,"The returned ",Object(r.b)("inlineCode",{parentName:"p"},"schemas")," object should be provided to the ",Object(r.b)("inlineCode",{parentName:"p"},"IDX")," constructor."),Object(r.b)("h2",{id:"example-usage"},"Example usage"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"import { IDX } from '@ceramicstudio/idx'\n\n// `ceramic` implements the CeramicApi interface and `schemas` is created using `publishSchemas` in the code above\nconst idx = new IDX({ ceramic, schemas })\n\n// Definitions should only be created once during the application development, the following code is for demonstration purpose only\nconst definitions = {\n  'myapp:profile': await idx.createDefinition({\n    name: 'MyApp user profile',\n    schema: schemas.BasicProfile\n  })\n}\n\n// A first user (Alice) can set her profile on her Index using the definition alias used by the app\nconst aliceIndex = new IDX({ ceramic, definitions, schemas })\nawait aliceIndex.set('myapp:profile', { name: 'Alice' })\n\n// Other users (such as Bob) can read from known Indexes using the same definion alias and Alice's DID\nconst bobClient = new IDX({ ceramic, definitions, schemas })\nconst aliceProfile = await bobClient.get('myapp:profile', aliceIndex.id)\n")))}m.isMDXComponent=!0},74:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return u}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),m=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=m(n),b=i,u=p["".concat(c,".").concat(b)]||p[b]||d[b]||r;return n?a.a.createElement(u,o(o({ref:t},l),{},{components:n})):a.a.createElement(u,o({ref:t},l))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,c=new Array(r);c[0]=b;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,c[1]=o;for(var l=2;l<r;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);