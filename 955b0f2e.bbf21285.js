(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{65:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(2),a=n(6),c=(n(0),n(74)),i={},o={unversionedId:"libs-tools",id:"libs-tools",isDocsHomePage:!1,title:"libs-tools",description:"Interfaces and types",source:"@site/docs/libs-tools.md",slug:"/libs-tools",permalink:"/docs/libs-tools",editUrl:"https://github.com/ceramicstudio/js-idx/edit/master/website/docs/libs-tools.md",version:"current"},s=[{value:"Interfaces and types",id:"interfaces-and-types",children:[{value:"CeramicApi",id:"ceramicapi",children:[]},{value:"SchemaItem",id:"schemaitem",children:[]},{value:"PublishConfig",id:"publishconfig",children:[]}]},{value:"Constants",id:"constants",children:[{value:"schemas",id:"schemas",children:[]},{value:"schemasList",id:"schemaslist",children:[]}]},{value:"API",id:"api",children:[{value:"isSchemaSecure",id:"isschemasecure",children:[]},{value:"publishSchema",id:"publishschema",children:[]},{value:"publishSchemas",id:"publishschemas",children:[]}]}],b={rightToc:s};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"interfaces-and-types"},"Interfaces and types"),Object(c.b)("h3",{id:"ceramicapi"},"CeramicApi"),Object(c.b)("p",null,"Ceramic API interface exported by the ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/ceramicnetwork/js-ceramic/tree/develop/packages/ceramic-common"}),Object(c.b)("inlineCode",{parentName:"a"},"@ceramicnetwork/ceramic-common")," library")),Object(c.b)("h3",{id:"schemaitem"},"SchemaItem"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"interface SchemaItem {\n  docId?: string\n  name: string\n  schema: Record<string, unknown>\n}\n")),Object(c.b)("h3",{id:"publishconfig"},"PublishConfig"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"interface PublishConfig {\n  ceramic: CeramicApi\n  schemas: Array<SchemaItem>\n}\n")),Object(c.b)("h2",{id:"constants"},"Constants"),Object(c.b)("h3",{id:"schemas"},"schemas"),Object(c.b)("p",null,"A record of all the JSON schemas defined and used by IDX, with the following keys:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"BasicProfile"),": see ",Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/ceramicnetwork/CIP/issues/32"}),"Basic Profile CIP")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"CryptoAccountLinks"),": see ",Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/ceramicnetwork/CIP/issues/44"}),"Crypto Account Links CIP")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"Definition")," (CIP to be defined)"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DocIdDocIdMap"),": see ",Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/ceramicnetwork/CIP/issues/54"}),"DocId to DocId Map CIP")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DocIdMap"),": see ",Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/ceramicnetwork/CIP/issues/51"}),"DocId Map CIP")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"IdentityIndex")," see ",Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/ceramicnetwork/CIP/issues/3"}),"Identity Index CIP")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"StringMap"),": see ",Object(c.b)("a",Object(r.a)({parentName:"li"},{href:"https://github.com/ceramicnetwork/CIP/issues/50"}),"String Map CIP"))),Object(c.b)("h3",{id:"schemaslist"},"schemasList"),Object(c.b)("p",null,"An array of ",Object(c.b)("inlineCode",{parentName:"p"},"SchemaItem")," of the exported ",Object(c.b)("inlineCode",{parentName:"p"},"schemas")),Object(c.b)("h2",{id:"api"},"API"),Object(c.b)("h3",{id:"isschemasecure"},"isSchemaSecure"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},Object(c.b)("inlineCode",{parentName:"li"},"schema: Record<string, unknown>"),": the JSON schema definition")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")," ",Object(c.b)("inlineCode",{parentName:"p"},"boolean")),Object(c.b)("h3",{id:"publishschema"},"publishSchema"),Object(c.b)("p",null,"Creates or updates (if a ",Object(c.b)("inlineCode",{parentName:"p"},"docId")," is provided) a schema on the Ceramic network"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},Object(c.b)("inlineCode",{parentName:"li"},"ceramic: CeramicApi")),Object(c.b)("li",{parentName:"ol"},Object(c.b)("inlineCode",{parentName:"li"},"item: SchemaItem"))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")," ",Object(c.b)("inlineCode",{parentName:"p"},"Promise<string>")," the docId of the published schema"),Object(c.b)("h3",{id:"publishschemas"},"publishSchemas"),Object(c.b)("p",null,"Creates or updates schemas on the Ceramic network"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Arguments")),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},Object(c.b)("inlineCode",{parentName:"li"},"config: PublishConfig"))),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns")," ",Object(c.b)("inlineCode",{parentName:"p"},"Promise<Record<string, string>>")," the name to docId record of the published schemas"))}l.isMDXComponent=!0},74:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),l=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),p=l(n),u=r,d=p["".concat(i,".").concat(u)]||p[u]||m[u]||c;return n?a.a.createElement(d,o(o({ref:t},b),{},{components:n})):a.a.createElement(d,o({ref:t},b))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,i=new Array(c);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var b=2;b<c;b++)i[b]=n[b];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);