(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return m}));var i=n(2),a=n(6),c=(n(0),n(74)),s={title:"Getting Started"},r={unversionedId:"lib-getting-started",id:"lib-getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Environment",source:"@site/docs/lib-getting-started.md",slug:"/lib-getting-started",permalink:"/js-idx/docs/lib-getting-started",editUrl:"https://github.com/ceramicstudio/js-idx/edit/master/website/docs/lib-getting-started.md",version:"current",sidebar:"docs",previous:{title:"Terminology",permalink:"/js-idx/docs/idx-terminology"},next:{title:"APIs",permalink:"/js-idx/docs/lib-apis"}},o=[{value:"Environment",id:"environment",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Definitions and Schemas",id:"definitions-and-schemas",children:[]},{value:"Example usage",id:"example-usage",children:[]}],d={rightToc:o};function m(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(i.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"environment"},"Environment"),Object(c.b)("p",null,"IDX needs to access the Ceramic network using an implementation of the Ceramic API as exported by the ",Object(c.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/ceramicnetwork/js-ceramic/tree/develop/packages/ceramic-common"}),Object(c.b)("inlineCode",{parentName:"a"},"@ceramicnetwork/ceramic-common")," library"),"."),Object(c.b)("p",null,"Packages implementing this interface include ",Object(c.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/ceramicnetwork/js-ceramic/tree/develop/packages/ceramic-core"}),Object(c.b)("inlineCode",{parentName:"a"},"@ceramicnetwork/ceramic-core"))," and ",Object(c.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/ceramicnetwork/js-ceramic/tree/develop/packages/ceramic-http-client"}),Object(c.b)("inlineCode",{parentName:"a"},"@ceramicnetwork/ceramic-http-client")),"."),Object(c.b)("h2",{id:"installation"},"Installation"),Object(c.b)("p",null,"The IDX library can be installed from npm:"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-sh"}),"npm install @ceramicstudio/idx\n")),Object(c.b)("h2",{id:"definitions-and-schemas"},"Definitions and Schemas"),Object(c.b)("p",null,"TODO: publishing schemas defined by idx-schemas to Ceramic node needs IdentityWallet, link to Joel's tutorial"),Object(c.b)("p",null,"All ",Object(c.b)("a",Object(i.a)({parentName:"p"},{href:"/js-idx/docs/idx-terminology#document"}),"Documents")," attached to the ",Object(c.b)("a",Object(i.a)({parentName:"p"},{href:"/js-idx/docs/idx-terminology#root-index"}),"Root Index")," need to have ",Object(c.b)("a",Object(i.a)({parentName:"p"},{href:"/js-idx/docs/idx-terminology#definition"}),"Definion"),"."),Object(c.b)("p",null,"Once a public Ceramic network is running, the IDX library will provide a set of Definions that can be used directly, but in the meantime these needs to be defined by developers using IDX."),Object(c.b)("p",null,"To create a Defininion, a specific ",Object(c.b)("a",Object(i.a)({parentName:"p"},{href:"/js-idx/docs/idx-terminology#schema"}),"Schema")," needs to be used, and therefore must be present on the Ceramic node used by the IDX instance.\nThe ",Object(c.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/ceramicstudio/js-idx-schemas"}),Object(c.b)("inlineCode",{parentName:"a"},"idx-schemas")," library")," can be used to easily publish schemas to the Ceramic node:"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"import { schemasList, publishSchemas } from '@ceramicstudio/idx-schemas'\n\n// `ceramic` implements the CeramicApi interface\nconst schemas = await publishSchemas({ ceramic, schemas: schemasList })\n")),Object(c.b)("p",null,"The returned ",Object(c.b)("inlineCode",{parentName:"p"},"schemas")," object should be provided to the ",Object(c.b)("inlineCode",{parentName:"p"},"IDX")," constructor."),Object(c.b)("h2",{id:"example-usage"},"Example usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(i.a)({parentName:"pre"},{className:"language-ts"}),"import { IDX } from '@ceramicstudio/idx'\n\n// `ceramic` implements the CeramicApi interface and `schemas` is created using `publishSchemas` in the code above\nconst idx = new IDX({ ceramic, schemas })\n\n// Definitions should only be created once during the application development, the following code is for demonstration purpose only\nconst definitions = {\n  'myapp:profile': await idx.createDefinition({\n    name: 'MyApp user profile',\n    schema: schemas.BasicProfile\n  })\n}\n\n// A first user (Alice) can set her profile on her Index using the definition alias used by the app\nconst aliceIndex = new IDX({ ceramic, definitions, schemas })\nawait aliceIndex.set('myapp:profile', { name: 'Alice' })\n\n// Other users (such as Bob) can read from known Indexes using the same definion alias and Alice's DID\nconst bobClient = new IDX({ ceramic, definitions, schemas })\nconst aliceProfile = await bobClient.get('myapp:profile', aliceIndex.id)\n")))}m.isMDXComponent=!0}}]);